<script type="text/javascript" src="path-to-mathjax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript"
  src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<br>
Recuerde que una gramática $G$ es una cuaterna $G =(\Sigma,V,P,S)$.
<ol>
  <li>$\Sigma$ es el conjunto de terminales. 
  <li>$V$ es un conjunto (disjunto de $\Sigma$) que se denomina conjunto de <i>variables sintácticas</i> o <i>categorías gramáticales</i>,
  <li>$P$ es un conjunto de pares de $V \times (V \cup \Sigma )^*$. En vez de escribir
  un par usando la notación $(A, \alpha) \in P$ se escribe $A \rightarrow \alpha$.
  Un elemento de $P$ se denomina producción. 
  <li>Por último, $S$ es un símbolo del conjunto
  $V$ que se denomina símbolo de arranque.
</ol>
<ol>
  <li> $\Sigma = \{ ; =,BEGIN, DO, END, WHILE, CONST, VAR, CALL, COMPARISON, PROCEDURE, ID, PI, E, +, -, *, /, \text{^}, !, \%, (, ), COMA, DOT, NUMBER, EOF \}$, 
  <li> $V = \{ prog, block, constt, cvrb, vaar, vrb, expressions, st, arg, condition, e \}$
  <li> Productions:
  <ol>
    <li>
<pre>
prog
    :block '.' EOF
    ;

block
    : constt vaar proc st
    ;
    
constt
    : /* empty */
    | CONST cvrb
    ;

cvrb
    : ID '=' NUMBER ';'
    | ID '=' NUMBER COMMA cvrb
    ;

proc
    : /* empty */
    | PROCEDURE ID '(' arg ')' ';' block ';'
    ;
    
vaar
    : /* empty */
    | VAR vrb
    ;
vrb 
    : ID ';'
    | ID COMMA vrb
    ;

expressions
    : st
    | expressions ';' st
    ;

st
    : /* empty */
    | e
    | IF condition THEN st ELSE st
    | IF condition THEN st 
    | WHILE condition DO st
    | BEGIN expressions ';' END
    | CALL ID '(' arg ')'
    ;
    
arg
    : /* empty */
    | ID arg
    ;
    
    
condition
    : NUMBER COMPARISON NUMBER
    | ID COMPARISON NUMBER
    | ID COMPARISON ID
    | ODD e 
    ;

e
    : ID '=' e
    | PI '=' e 
    | E '=' e 
    | e '+' e
    | e '-' e
    | e '*' e
    | e '/' e
    | e '^' e
    | e '!'
    | e '%'
    | '-' e %prec UMINUS
    | '(' e ')'
    | NUMBER
    | E
    | PI
    | ID 
    ;

</pre>
  </ol>
  <li> Start symbol: $prog$
</ol>
<BR>
<BR>

